// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/15's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1e12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1e12",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.export_inline",
      "message": "Did you know that you can export functions, classes and constants directly
inline?
\`\`\`javascript
export function gigasecond(entryDate) ...
\`\`\`",
      "template": "Did you know that you can export functions, classes and constants directly
inline?
\`\`\`javascript
export %{method.signature}
\`\`\`",
      "variables": Object {
        "method.signature": "function gigasecond(entryDate) ...",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/27's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = (10 ** 9) * 1000

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "(10 ** 9) * 1000",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.export_inline",
      "message": "Did you know that you can export functions, classes and constants directly
inline?
\`\`\`javascript
export const gigasecond = date => ...;
\`\`\`",
      "template": "Did you know that you can export functions, classes and constants directly
inline?
\`\`\`javascript
export %{method.signature}
\`\`\`",
      "variables": Object {
        "method.signature": "const gigasecond = date => ...;",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/31's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1E12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1E12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/34's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/38's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 10 ** 12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "10 ** 12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/40's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1e9 * 1e3

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1e9 * 1e3",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/45's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 10**12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "10**12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/46's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.generic.prefer_const_over_let_and_var",
      "message": "Instead of \`var GIGASECOND\`, consider using \`const\`.

\`const\` is a signal that the identifier won't be reassigned, which SHOULD be
true for this top-level constant. (Not to be confused with _immutable values_).",
      "template": "Instead of \`%{kind} %{name}\`, consider using \`const\`.

\`const\` is a signal that the identifier won't be reassigned, which SHOULD be
true for this top-level constant. (Not to be confused with _immutable values_).",
      "variables": Object {
        "kind": "var",
        "name": "GIGASECOND",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/50's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10, 12)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10, 12)",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/101's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 10 ** 12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "10 ** 12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/103's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10, 12)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10, 12)",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/110's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10,12)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10,12)",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/120's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1e12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1e12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/123's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10,12)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10,12)",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.export_inline",
      "message": "Did you know that you can export functions, classes and constants directly
inline?
\`\`\`javascript
export let gigasecond = (date) => ...
\`\`\`",
      "template": "Did you know that you can export functions, classes and constants directly
inline?
\`\`\`javascript
export %{method.signature}
\`\`\`",
      "variables": Object {
        "method.signature": "let gigasecond = (date) => ...",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/125's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10,12)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10,12)",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/130's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_extracted_top_level_constant",
      "message": "Instead of defining the constant _inside_ the function, consider extracting it
to the top-level. Constants, functions and classes that are not \`export\`ed,
are not accessible from outside the file.

\`\`\`javascript
const GIGA_SECOND = 1000 * Math.pow(10, 9)

export const gigasecond = (...)
\`\`\`",
      "template": "Instead of defining the constant _inside_ the function, consider extracting it
to the top-level. Constants, functions and classes that are not \`export\`ed,
are not accessible from outside the file.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGA_SECOND",
        "value": "1000 * Math.pow(10, 9)",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/137's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1000 * Math.pow(10, 9)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1000 * Math.pow(10, 9)",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/138's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1e12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1e12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/150's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 10 ** 9 * 1000

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "10 ** 9 * 1000",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/153's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 10**12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "10**12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/160's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10,12)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10,12)",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/161's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10, 12)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10, 12)",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/162's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1e9 * 1e3

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1e9 * 1e3",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/163's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1e9 * 1e3

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1e9 * 1e3",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/179's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10, 12)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10, 12)",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/193's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1e9 * 1e3

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1e9 * 1e3",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/195's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_extracted_top_level_constant",
      "message": "Instead of defining the constant _inside_ the function, consider extracting it
to the top-level. Constants, functions and classes that are not \`export\`ed,
are not accessible from outside the file.

\`\`\`javascript
const gigasecondsInJs = (10 ** 9) * 1000

export const gigasecond = (...)
\`\`\`",
      "template": "Instead of defining the constant _inside_ the function, consider extracting it
to the top-level. Constants, functions and classes that are not \`export\`ed,
are not accessible from outside the file.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "gigasecondsInJs",
        "value": "(10 ** 9) * 1000",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/206's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 10**12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "10**12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/220's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10, 9) * 1000

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10, 9) * 1000",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/229's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10,12)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10,12)",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/233's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1e12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1e12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/234's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10, 12)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10, 12)",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/242's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10, 9) * 1000

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10, 9) * 1000",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/250's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10, 12)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10, 12)",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.export_inline",
      "message": "Did you know that you can export functions, classes and constants directly
inline?
\`\`\`javascript
export function gigasecond(bornDate) ...
\`\`\`",
      "template": "Did you know that you can export functions, classes and constants directly
inline?
\`\`\`javascript
export %{method.signature}
\`\`\`",
      "variables": Object {
        "method.signature": "function gigasecond(bornDate) ...",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/253's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 10 ** 12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "10 ** 12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/264's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1e12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1e12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/274's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = (10**9)*1000

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "(10**9)*1000",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/284's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10, 12)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10, 12)",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/285's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = (10 ** 9) * 1000

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "(10 ** 9) * 1000",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/290's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 10**12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "10**12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/291's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = (10 ** 9) * 1000

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "(10 ** 9) * 1000",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/297's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = (10 ** 9) * 1000

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "(10 ** 9) * 1000",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/307's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1e12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1e12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/311's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10,12)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10,12)",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/345's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 10**12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "10**12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/352's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1e9 * 1000

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1e9 * 1000",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.export_inline",
      "message": "Did you know that you can export functions, classes and constants directly
inline?
\`\`\`javascript
export const gigasecond = birth => ...;
\`\`\`",
      "template": "Did you know that you can export functions, classes and constants directly
inline?
\`\`\`javascript
export %{method.signature}
\`\`\`",
      "variables": Object {
        "method.signature": "const gigasecond = birth => ...;",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/353's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 10 ** 9 * 1000

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "10 ** 9 * 1000",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/374's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10, 9) * 1000

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10, 9) * 1000",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/375's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = (10 ** 9) * 1000

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "(10 ** 9) * 1000",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/377's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/392's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1E12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1E12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/394's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 10 ** 9 * 1000

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "10 ** 9 * 1000",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/398's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1e12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1e12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/404's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 10 ** 12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "10 ** 12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/410's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1e12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1e12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/414's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10, 12)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10, 12)",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/421's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1e12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1e12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/425's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10,9)*1000

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10,9)*1000",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/428's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10,12)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10,12)",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/429's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10,12)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10,12)",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/433's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1e12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1e12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/434's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 10 ** 12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "10 ** 12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/448's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/450's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 10 ** 12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "10 ** 12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/454's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10, 12)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10, 12)",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/462's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/463's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10, 12)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10, 12)",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/464's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 10 ** 12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "10 ** 12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/465's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 10**12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "10**12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/468's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10, 12)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10, 12)",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/470's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 10 ** 12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "10 ** 12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/471's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 10**9 * 1000

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "10**9 * 1000",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/474's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1000 * 10 ** 9

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1000 * 10 ** 9",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.export_inline",
      "message": "Did you know that you can export functions, classes and constants directly
inline?
\`\`\`javascript
export const gigasecond = (birthdate) => ...
\`\`\`",
      "template": "Did you know that you can export functions, classes and constants directly
inline?
\`\`\`javascript
export %{method.signature}
\`\`\`",
      "variables": Object {
        "method.signature": "const gigasecond = (birthdate) => ...",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/475's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1e12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1e12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/476's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1e9 * 1000

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1e9 * 1000",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/483's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10, 12)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10, 12)",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/487's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1e12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1e12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/490's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1e12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1e12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/491's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_extracted_top_level_constant",
      "message": "Instead of defining the constant _inside_ the function, consider extracting it
to the top-level. Constants, functions and classes that are not \`export\`ed,
are not accessible from outside the file.

\`\`\`javascript
const billionSeconds = 10**12

export const gigasecond = (...)
\`\`\`",
      "template": "Instead of defining the constant _inside_ the function, consider extracting it
to the top-level. Constants, functions and classes that are not \`export\`ed,
are not accessible from outside the file.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "billionSeconds",
        "value": "10**12",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to approve matches gigasecond/499's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10, 9)*1000

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10, 9)*1000",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/11's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_side_effect_free_date",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/12's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`VariableDeclarator\` are easy to misread and difficult to
comprehend. Rewrite the literal \`VariableDeclarator\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "VariableDeclarator",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/14's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.general.no_method",
      "message": "No method called \`gigasecond\`. The tests won't pass without it.",
      "template": "No method called \`%{method.name}\`. The tests won't pass without it.",
      "variables": Object {
        "method.name": "gigasecond",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/17's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1e12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1e12",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.dont_use_date_parse",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime),
as \`Date.parse(date)\` is not a good candidate. It's supposed to
work with strings only, and not _intended_ to be used like this.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime),
as \`Date.parse(%{parameter.name})\` is not a good candidate. It's supposed to
work with strings only, and not _intended_ to be used like this.",
      "variables": Object {
        "parameter.name": "date",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/18's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/20's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`BinaryExpression\` are easy to misread and difficult to
comprehend. Rewrite the literal \`BinaryExpression\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "BinaryExpression",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/21's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/23's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`BinaryExpression\` are easy to misread and difficult to
comprehend. Rewrite the literal \`BinaryExpression\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "BinaryExpression",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/24's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_side_effect_free_date",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/26's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 1000 * (10 ** 9)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "1000 * (10 ** 9)",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.dont_use_date_value",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
instead of [\`Date#valueOf\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf).
They are functionally equivalent, but \`valueOf\` is marked as follows:

> This method is usually called internally by JavaScript and not explicitly in
> code.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
instead of [\`Date#valueOf\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf).
They are functionally equivalent, but \`valueOf\` is marked as follows:

> This method is usually called internally by JavaScript and not explicitly in
> code.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/106's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/107's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/109's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/111's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.dont_use_date_value",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
instead of [\`Date#valueOf\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf).
They are functionally equivalent, but \`valueOf\` is marked as follows:

> This method is usually called internally by JavaScript and not explicitly in
> code.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
instead of [\`Date#valueOf\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf).
They are functionally equivalent, but \`valueOf\` is marked as follows:

> This method is usually called internally by JavaScript and not explicitly in
> code.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/113's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.general.no_method",
      "message": "No method called \`gigasecond\`. The tests won't pass without it.",
      "template": "No method called \`%{method.name}\`. The tests won't pass without it.",
      "variables": Object {
        "method.name": "gigasecond",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/114's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/115's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/118's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`BinaryExpression\` are easy to misread and difficult to
comprehend. Rewrite the literal \`BinaryExpression\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "BinaryExpression",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/119's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.general.no_method",
      "message": "No method called \`gigasecond\`. The tests won't pass without it.",
      "template": "No method called \`%{method.name}\`. The tests won't pass without it.",
      "variables": Object {
        "method.name": "gigasecond",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/122's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/127's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10, 9) * 1000

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10, 9) * 1000",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.dont_use_date_parse",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime),
as \`Date.parse(date)\` is not a good candidate. It's supposed to
work with strings only, and not _intended_ to be used like this.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime),
as \`Date.parse(%{parameter.name})\` is not a good candidate. It's supposed to
work with strings only, and not _intended_ to be used like this.",
      "variables": Object {
        "parameter.name": "date",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/128's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/133's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_side_effect_free_date",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/134's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = (10 ** 9) * 1000

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "(10 ** 9) * 1000",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.dont_use_date_parse",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime),
as \`Date.parse(time)\` is not a good candidate. It's supposed to
work with strings only, and not _intended_ to be used like this.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime),
as \`Date.parse(%{parameter.name})\` is not a good candidate. It's supposed to
work with strings only, and not _intended_ to be used like this.",
      "variables": Object {
        "parameter.name": "time",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/135's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/136's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_side_effect_free_date",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/142's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10, 12)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10, 12)",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.dont_use_date_value",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
instead of [\`Date#valueOf\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf).
They are functionally equivalent, but \`valueOf\` is marked as follows:

> This method is usually called internally by JavaScript and not explicitly in
> code.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
instead of [\`Date#valueOf\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf).
They are functionally equivalent, but \`valueOf\` is marked as follows:

> This method is usually called internally by JavaScript and not explicitly in
> code.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/144's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/145's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_side_effect_free_date",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/148's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.general.no_method",
      "message": "No method called \`gigasecond\`. The tests won't pass without it.",
      "template": "No method called \`%{method.name}\`. The tests won't pass without it.",
      "variables": Object {
        "method.name": "gigasecond",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/149's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/151's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.dont_use_date_value",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
instead of [\`Date#valueOf\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf).
They are functionally equivalent, but \`valueOf\` is marked as follows:

> This method is usually called internally by JavaScript and not explicitly in
> code.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
instead of [\`Date#valueOf\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf).
They are functionally equivalent, but \`valueOf\` is marked as follows:

> This method is usually called internally by JavaScript and not explicitly in
> code.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/152's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`BinaryExpression\` are easy to misread and difficult to
comprehend. Rewrite the literal \`BinaryExpression\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "BinaryExpression",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/154's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/157's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/158's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.general.no_named_export",
      "message": "No [export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) called \`gigasecond\`.
The tests won't pass without it.

Did you forget adding: \`export gigasecond\`?",
      "template": "No [export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) called \`%{export.name}\`.
The tests won't pass without it.

Did you forget adding: \`export %{export.name}\`?",
      "variables": Object {
        "export.name": "gigasecond",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/164's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/165's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/167's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_side_effect_free_date",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/168's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`BinaryExpression\` are easy to misread and difficult to
comprehend. Rewrite the literal \`BinaryExpression\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "BinaryExpression",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/170's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_side_effect_free_date",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/173's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/174's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`VariableDeclarator\` are easy to misread and difficult to
comprehend. Rewrite the literal \`VariableDeclarator\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "VariableDeclarator",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/175's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/176's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_side_effect_free_date",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/180's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/181's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/182's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/183's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.general.no_parameter",
      "message": "Your function \`gigasecond\` does not have a parameter.
The tests won't pass without it.",
      "template": "Your function \`%{function.name}\` does not have a parameter.
The tests won't pass without it.",
      "variables": Object {
        "function.name": "gigasecond",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/185's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_side_effect_free_date",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/190's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/192's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.dont_use_date_value",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
instead of [\`Date#valueOf\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf).
They are functionally equivalent, but \`valueOf\` is marked as follows:

> This method is usually called internally by JavaScript and not explicitly in
> code.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
instead of [\`Date#valueOf\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf).
They are functionally equivalent, but \`valueOf\` is marked as follows:

> This method is usually called internally by JavaScript and not explicitly in
> code.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/194's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.general.no_method",
      "message": "No method called \`gigasecond\`. The tests won't pass without it.",
      "template": "No method called \`%{method.name}\`. The tests won't pass without it.",
      "variables": Object {
        "method.name": "gigasecond",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/196's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/197's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_side_effect_free_date",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/198's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/199's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/201's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 10**12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "10**12",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.dont_use_date_value",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
instead of [\`Date#valueOf\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf).
They are functionally equivalent, but \`valueOf\` is marked as follows:

> This method is usually called internally by JavaScript and not explicitly in
> code.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
instead of [\`Date#valueOf\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf).
They are functionally equivalent, but \`valueOf\` is marked as follows:

> This method is usually called internally by JavaScript and not explicitly in
> code.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/202's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/203's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.dont_use_get_seconds",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
to get the number of milliseconds the \`Date\` represents, instead of getting
the \`seconds\` component of the \`Date\`. In general, [Unix/UTC time](https://en.wikipedia.org/wiki/Unix_time)
is preferred when dealing with dates, as it is not affected by _interpretation_
or locale (such as timezones).",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
to get the number of milliseconds the \`Date\` represents, instead of getting
the \`seconds\` component of the \`Date\`. In general, [Unix/UTC time](https://en.wikipedia.org/wiki/Unix_time)
is preferred when dealing with dates, as it is not affected by _interpretation_
or locale (such as timezones).",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/204's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_side_effect_free_date",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/207's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/208's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_side_effect_free_date",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/214's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.general.no_method",
      "message": "No method called \`gigasecond\`. The tests won't pass without it.",
      "template": "No method called \`%{method.name}\`. The tests won't pass without it.",
      "variables": Object {
        "method.name": "gigasecond",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/218's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_side_effect_free_date",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/219's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/224's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.generic.prefer_const_over_let_and_var",
      "message": "Instead of \`let gigasecondAnniversary\`, consider using \`const\`.

\`const\` is a signal that the identifier won't be reassigned, which SHOULD be
true for this top-level constant. (Not to be confused with _immutable values_).",
      "template": "Instead of \`%{kind} %{name}\`, consider using \`const\`.

\`const\` is a signal that the identifier won't be reassigned, which SHOULD be
true for this top-level constant. (Not to be confused with _immutable values_).",
      "variables": Object {
        "kind": "let",
        "name": "gigasecondAnniversary",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.dont_use_date_value",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
instead of [\`Date#valueOf\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf).
They are functionally equivalent, but \`valueOf\` is marked as follows:

> This method is usually called internally by JavaScript and not explicitly in
> code.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
instead of [\`Date#valueOf\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf).
They are functionally equivalent, but \`valueOf\` is marked as follows:

> This method is usually called internally by JavaScript and not explicitly in
> code.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/225's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_side_effect_free_date",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/227's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/228's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_side_effect_free_date",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/230's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = 10 ** 12

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "10 ** 12",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.dont_use_date_value",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
instead of [\`Date#valueOf\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf).
They are functionally equivalent, but \`valueOf\` is marked as follows:

> This method is usually called internally by JavaScript and not explicitly in
> code.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
instead of [\`Date#valueOf\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf).
They are functionally equivalent, but \`valueOf\` is marked as follows:

> This method is usually called internally by JavaScript and not explicitly in
> code.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/235's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_side_effect_free_date",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/236's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/237's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/239's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.dont_use_get_seconds",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
to get the number of milliseconds the \`Date\` represents, instead of getting
the \`seconds\` component of the \`Date\`. In general, [Unix/UTC time](https://en.wikipedia.org/wiki/Unix_time)
is preferred when dealing with dates, as it is not affected by _interpretation_
or locale (such as timezones).",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
to get the number of milliseconds the \`Date\` represents, instead of getting
the \`seconds\` component of the \`Date\`. In general, [Unix/UTC time](https://en.wikipedia.org/wiki/Unix_time)
is preferred when dealing with dates, as it is not affected by _interpretation_
or locale (such as timezones).",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/241's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.dont_use_get_seconds",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
to get the number of milliseconds the \`Date\` represents, instead of getting
the \`seconds\` component of the \`Date\`. In general, [Unix/UTC time](https://en.wikipedia.org/wiki/Unix_time)
is preferred when dealing with dates, as it is not affected by _interpretation_
or locale (such as timezones).",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
to get the number of milliseconds the \`Date\` represents, instead of getting
the \`seconds\` component of the \`Date\`. In general, [Unix/UTC time](https://en.wikipedia.org/wiki/Unix_time)
is preferred when dealing with dates, as it is not affected by _interpretation_
or locale (such as timezones).",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/245's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`BinaryExpression\` are easy to misread and difficult to
comprehend. Rewrite the literal \`BinaryExpression\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "BinaryExpression",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/252's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_side_effect_free_date",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/254's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10, 12)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10, 12)",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.dont_use_date_parse",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime),
as \`Date.parse(date)\` is not a good candidate. It's supposed to
work with strings only, and not _intended_ to be used like this.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime),
as \`Date.parse(%{parameter.name})\` is not a good candidate. It's supposed to
work with strings only, and not _intended_ to be used like this.",
      "variables": Object {
        "parameter.name": "date",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/258's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`BinaryExpression\` are easy to misread and difficult to
comprehend. Rewrite the literal \`BinaryExpression\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "BinaryExpression",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/259's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`BinaryExpression\` are easy to misread and difficult to
comprehend. Rewrite the literal \`BinaryExpression\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "BinaryExpression",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/260's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/261's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.general.no_method",
      "message": "No method called \`gigasecond\`. The tests won't pass without it.",
      "template": "No method called \`%{method.name}\`. The tests won't pass without it.",
      "variables": Object {
        "method.name": "gigasecond",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/265's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_side_effect_free_date",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/266's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`BinaryExpression\` are easy to misread and difficult to
comprehend. Rewrite the literal \`BinaryExpression\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "BinaryExpression",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/267's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/268's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/269's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_top_level_constant",
      "message": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const GIGASECOND_IN_MS = Math.pow(10, 12)

export const gigasecond = (...)
\`\`\`",
      "template": "Your solution current has a magic number, or rather a magic expression. Consider
extracting the gigasecond number into a top-level constant, so that you may
remember what it represents if you ever come back to this code.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "GIGASECOND_IN_MS",
        "value": "Math.pow(10, 12)",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.dont_use_date_parse",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime),
as \`Date.parse(birthdate)\` is not a good candidate. It's supposed to
work with strings only, and not _intended_ to be used like this.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime),
as \`Date.parse(%{parameter.name})\` is not a good candidate. It's supposed to
work with strings only, and not _intended_ to be used like this.",
      "variables": Object {
        "parameter.name": "birthdate",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/270's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.general.no_method",
      "message": "No method called \`gigasecond\`. The tests won't pass without it.",
      "template": "No method called \`%{method.name}\`. The tests won't pass without it.",
      "variables": Object {
        "method.name": "gigasecond",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/271's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.dont_use_get_seconds",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
to get the number of milliseconds the \`Date\` represents, instead of getting
the \`seconds\` component of the \`Date\`. In general, [Unix/UTC time](https://en.wikipedia.org/wiki/Unix_time)
is preferred when dealing with dates, as it is not affected by _interpretation_
or locale (such as timezones).",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
to get the number of milliseconds the \`Date\` represents, instead of getting
the \`seconds\` component of the \`Date\`. In general, [Unix/UTC time](https://en.wikipedia.org/wiki/Unix_time)
is preferred when dealing with dates, as it is not affected by _interpretation_
or locale (such as timezones).",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/272's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_side_effect_free_date",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/273's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/277's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.general.no_named_export",
      "message": "No [export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) called \`gigasecond\`.
The tests won't pass without it.

Did you forget adding: \`export gigasecond\`?",
      "template": "No [export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) called \`%{export.name}\`.
The tests won't pass without it.

Did you forget adding: \`export %{export.name}\`?",
      "variables": Object {
        "export.name": "gigasecond",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/278's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.general.no_method",
      "message": "No method called \`gigasecond\`. The tests won't pass without it.",
      "template": "No method called \`%{method.name}\`. The tests won't pass without it.",
      "variables": Object {
        "method.name": "gigasecond",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/279's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.dont_use_date_parse",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime),
as \`Date.parse(utcDate)\` is not a good candidate. It's supposed to
work with strings only, and not _intended_ to be used like this.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime),
as \`Date.parse(%{parameter.name})\` is not a good candidate. It's supposed to
work with strings only, and not _intended_ to be used like this.",
      "variables": Object {
        "parameter.name": "utcDate",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/280's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_side_effect_free_date",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/281's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.use_number_comprehension",
      "message": "Large numbers like \`1000000000000\` are easy to misread and difficult to
comprehend. Rewrite the literal \`1000000000000\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "template": "Large numbers like \`%{literal}\` are easy to misread and difficult to
comprehend. Rewrite the literal \`%{literal}\` using \`Math.pow\` or
\`10 ** n\` to make it more readable and lower the cognitive complexity.",
      "variables": Object {
        "literal": "1000000000000",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/283's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_side_effect_free_date",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/286's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_extracted_top_level_constant",
      "message": "Instead of defining the constant _inside_ the function, consider extracting it
to the top-level. Constants, functions and classes that are not \`export\`ed,
are not accessible from outside the file.

\`\`\`javascript
const gs = Math.pow(10, 12)

export const gigasecond = (...)
\`\`\`",
      "template": "Instead of defining the constant _inside_ the function, consider extracting it
to the top-level. Constants, functions and classes that are not \`export\`ed,
are not accessible from outside the file.

\`\`\`javascript
const %{name} = %{value}

export const gigasecond = (...)
\`\`\`",
      "variables": Object {
        "name": "gs",
        "value": "Math.pow(10, 12)",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.dont_use_date_parse",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime),
as \`Date.parse(input)\` is not a good candidate. It's supposed to
work with strings only, and not _intended_ to be used like this.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime),
as \`Date.parse(%{parameter.name})\` is not a good candidate. It's supposed to
work with strings only, and not _intended_ to be used like this.",
      "variables": Object {
        "parameter.name": "input",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on gigasecond fixtures and expecting it to disapprove matches gigasecond/288's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.gigasecond.prefer_side_effect_free_date",
      "message": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "template": "Use [\`Date#getTime\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)
and [\`new Date(value)\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Syntax),
which takes a number of milliseconds as \`value\` and constructs a _new_ date.

This ensures the _input_ is not modified when calling \`gigasecond\`, which
also means that there are no unintended side-effects. Futhermore, \`setSeconds\`
only works because it _rolls over_, but it wasn't meant to be used like this.
Its function is to set the \`seconds\` component of a \`Date\`.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

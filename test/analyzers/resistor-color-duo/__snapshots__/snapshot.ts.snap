// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`When running analysis on resistor-color-duo fixtures and expecting it to approve matches resistor-color-duo/0's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.destructuring_in_parameter",
      "message": "You can destructure an array directly in the parameter \`colors\`.
This allows you to give a name to the items inside, limit how many values come
in and replace the more cryptic numeric indexers with the named items.",
      "template": "You can destructure an array directly in the parameter \`%{parameter}\`.
This allows you to give a name to the items inside, limit how many values come
in and replace the more cryptic numeric indexers with the named items.",
      "variables": Object {
        "parameter": "colors",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to approve matches resistor-color-duo/15's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [],
  "status": "approve",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to approve matches resistor-color-duo/32's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.destructuring_in_parameter",
      "message": "You can destructure an array directly in the parameter \`colors\`.
This allows you to give a name to the items inside, limit how many values come
in and replace the more cryptic numeric indexers with the named items.",
      "template": "You can destructure an array directly in the parameter \`%{parameter}\`.
This allows you to give a name to the items inside, limit how many values come
in and replace the more cryptic numeric indexers with the named items.",
      "variables": Object {
        "parameter": "colors",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to approve matches resistor-color-duo/102's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.destructuring_in_parameter",
      "message": "You can destructure an array directly in the parameter \`colors\`.
This allows you to give a name to the items inside, limit how many values come
in and replace the more cryptic numeric indexers with the named items.",
      "template": "You can destructure an array directly in the parameter \`%{parameter}\`.
This allows you to give a name to the items inside, limit how many values come
in and replace the more cryptic numeric indexers with the named items.",
      "variables": Object {
        "parameter": "colors",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to approve matches resistor-color-duo/121's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.destructuring_in_parameter",
      "message": "You can destructure an array directly in the parameter \`colors\`.
This allows you to give a name to the items inside, limit how many values come
in and replace the more cryptic numeric indexers with the named items.",
      "template": "You can destructure an array directly in the parameter \`%{parameter}\`.
This allows you to give a name to the items inside, limit how many values come
in and replace the more cryptic numeric indexers with the named items.",
      "variables": Object {
        "parameter": "colors",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to approve matches resistor-color-duo/128's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.destructuring_in_parameter",
      "message": "You can destructure an array directly in the parameter \`color\`.
This allows you to give a name to the items inside, limit how many values come
in and replace the more cryptic numeric indexers with the named items.",
      "template": "You can destructure an array directly in the parameter \`%{parameter}\`.
This allows you to give a name to the items inside, limit how many values come
in and replace the more cryptic numeric indexers with the named items.",
      "variables": Object {
        "parameter": "color",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to approve matches resistor-color-duo/145's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.export_inline",
      "message": "Did you know that you can export functions, classes and constants directly
inline?
\`\`\`javascript
export const decodedValue = colors => ...;
\`\`\`",
      "template": "Did you know that you can export functions, classes and constants directly
inline?
\`\`\`javascript
export %{method.signature}
\`\`\`",
      "variables": Object {
        "method.signature": "const decodedValue = colors => ...;",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.destructuring_in_parameter",
      "message": "You can destructure an array directly in the parameter \`colors\`.
This allows you to give a name to the items inside, limit how many values come
in and replace the more cryptic numeric indexers with the named items.",
      "template": "You can destructure an array directly in the parameter \`%{parameter}\`.
This allows you to give a name to the items inside, limit how many values come
in and replace the more cryptic numeric indexers with the named items.",
      "variables": Object {
        "parameter": "colors",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to approve matches resistor-color-duo/160's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.destructuring_in_parameter",
      "message": "You can destructure an array directly in the parameter \`resistors\`.
This allows you to give a name to the items inside, limit how many values come
in and replace the more cryptic numeric indexers with the named items.",
      "template": "You can destructure an array directly in the parameter \`%{parameter}\`.
This allows you to give a name to the items inside, limit how many values come
in and replace the more cryptic numeric indexers with the named items.",
      "variables": Object {
        "parameter": "resistors",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to approve matches resistor-color-duo/170's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.destructuring_in_parameter",
      "message": "You can destructure an array directly in the parameter \`colors\`.
This allows you to give a name to the items inside, limit how many values come
in and replace the more cryptic numeric indexers with the named items.",
      "template": "You can destructure an array directly in the parameter \`%{parameter}\`.
This allows you to give a name to the items inside, limit how many values come
in and replace the more cryptic numeric indexers with the named items.",
      "variables": Object {
        "parameter": "colors",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to approve matches resistor-color-duo/229's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.export_inline",
      "message": "Did you know that you can export functions, classes and constants directly
inline?
\`\`\`javascript
export function decodedValue(bands) ...
\`\`\`",
      "template": "Did you know that you can export functions, classes and constants directly
inline?
\`\`\`javascript
export %{method.signature}
\`\`\`",
      "variables": Object {
        "method.signature": "function decodedValue(bands) ...",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.destructuring_in_parameter",
      "message": "You can destructure an array directly in the parameter \`bands\`.
This allows you to give a name to the items inside, limit how many values come
in and replace the more cryptic numeric indexers with the named items.",
      "template": "You can destructure an array directly in the parameter \`%{parameter}\`.
This allows you to give a name to the items inside, limit how many values come
in and replace the more cryptic numeric indexers with the named items.",
      "variables": Object {
        "parameter": "bands",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to approve matches resistor-color-duo/311's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.destructuring_in_parameter",
      "message": "You can destructure an array directly in the parameter \`ar\`.
This allows you to give a name to the items inside, limit how many values come
in and replace the more cryptic numeric indexers with the named items.",
      "template": "You can destructure an array directly in the parameter \`%{parameter}\`.
This allows you to give a name to the items inside, limit how many values come
in and replace the more cryptic numeric indexers with the named items.",
      "variables": Object {
        "parameter": "ar",
      },
    },
  ],
  "status": "approve",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/1's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_add_missing_call",
      "message": "📕 In order to limit the number of colors processed to two, expected a \`.slice(0, 2)\` call. If
that reasoning applies, mentor the student to add this call.",
      "template": "📕 In order to %{expected.reason}, expected a \`%{method.name}\` call. If
that reasoning applies, mentor the student to add this call.",
      "variables": Object {
        "expected.reason": "limit the number of colors processed to two",
        "method.name": ".slice(0, 2)",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.limit_number_of_colors",
      "message": "💬 Limit the number of input colors that are processed. If more than two colors
are passed in, only the first two colors should be used to calculate the total
\`colorCode\` value.

📕 (At least) one test case inputs three colors instead of two. If the student
has not accounted for this, they might need to update their solution. Help them
find the button to update. The tests won't pass without limiting the number of
colors.",
      "template": "💬 Limit the number of input colors that are processed. If more than two colors
are passed in, only the first two colors should be used to calculate the total
\`colorCode\` value.

📕 (At least) one test case inputs three colors instead of two. If the student
has not accounted for this, they might need to update their solution. Help them
find the button to update. The tests won't pass without limiting the number of
colors.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/2's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_math_instead_of_type_juggling",
      "message": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "template": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/10's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/11's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`.forEach(...)\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": ".forEach(...)",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/12's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/13's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.general.no_method",
      "message": "No method called \`decodedValue\`. The tests won't pass without it.",
      "template": "No method called \`%{method.name}\`. The tests won't pass without it.",
      "variables": Object {
        "method.name": "decodedValue",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/17's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/18's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`.forEach(...)\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": ".forEach(...)",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/19's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/20's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/22's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_optimise_helper",
      "message": "⚡ The helper method \`colorCode\` is not optimal. The helper can
probably be the same as the solution to \`resistor-color\`. Mentor the student
to retrieve their solution and/or optimise their helper.",
      "template": "⚡ The helper method \`%{method.name}\` is not optimal. The helper can
probably be the same as the solution to \`resistor-color\`. Mentor the student
to retrieve their solution and/or optimise their helper.",
      "variables": Object {
        "method.name": "colorCode",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/23's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_add_missing_call",
      "message": "📕 In order to limit the number of colors processed to two, expected a \`.slice(0, 2)\` call. If
that reasoning applies, mentor the student to add this call.",
      "template": "📕 In order to %{expected.reason}, expected a \`%{method.name}\` call. If
that reasoning applies, mentor the student to add this call.",
      "variables": Object {
        "expected.reason": "limit the number of colors processed to two",
        "method.name": ".slice(0, 2)",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.limit_number_of_colors",
      "message": "💬 Limit the number of input colors that are processed. If more than two colors
are passed in, only the first two colors should be used to calculate the total
\`colorCode\` value.

📕 (At least) one test case inputs three colors instead of two. If the student
has not accounted for this, they might need to update their solution. Help them
find the button to update. The tests won't pass without limiting the number of
colors.",
      "template": "💬 Limit the number of input colors that are processed. If more than two colors
are passed in, only the first two colors should be used to calculate the total
\`colorCode\` value.

📕 (At least) one test case inputs three colors instead of two. If the student
has not accounted for this, they might need to update their solution. Help them
find the button to update. The tests won't pass without limiting the number of
colors.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/24's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/25's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`for(...) { }\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": "for(...) { }",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/26's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/27's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_math_instead_of_type_juggling",
      "message": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "template": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/30's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`.forEach(...)\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": ".forEach(...)",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/100's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_math_instead_of_type_juggling",
      "message": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "template": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/103's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/104's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/105's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_math_instead_of_type_juggling",
      "message": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "template": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/106's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/107's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/108's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/110's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/111's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/112's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_math_instead_of_type_juggling",
      "message": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "template": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/114's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_math_instead_of_type_juggling",
      "message": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "template": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/115's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/116's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/117's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`.forEach(...)\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": ".forEach(...)",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/118's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/119's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/120's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/123's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.signature_not_optimal",
      "message": "📕 If you look at the tests, the function \`decodedValue\` only receives one
parameter. Nothing more and nothing less.

📕 Remove the additional parameters from your function, as their value will
always be \`undefined\` or whatever default you've assigned.",
      "template": "📕 If you look at the tests, the function \`decodedValue\` only receives one
parameter. Nothing more and nothing less.

📕 Remove the additional parameters from your function, as their value will
always be \`undefined\` or whatever default you've assigned.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/124's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_math_instead_of_type_juggling",
      "message": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "template": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/125's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/126's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/127's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.limit_number_of_colors",
      "message": "💬 Limit the number of input colors that are processed. If more than two colors
are passed in, only the first two colors should be used to calculate the total
\`colorCode\` value.

📕 (At least) one test case inputs three colors instead of two. If the student
has not accounted for this, they might need to update their solution. Help them
find the button to update. The tests won't pass without limiting the number of
colors.",
      "template": "💬 Limit the number of input colors that are processed. If more than two colors
are passed in, only the first two colors should be used to calculate the total
\`colorCode\` value.

📕 (At least) one test case inputs three colors instead of two. If the student
has not accounted for this, they might need to update their solution. Help them
find the button to update. The tests won't pass without limiting the number of
colors.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/130's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`for(...) { }\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": "for(...) { }",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/134's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/135's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/136's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.signature_not_optimal",
      "message": "📕 If you look at the tests, the function \`decodedValue\` only receives one
parameter. Nothing more and nothing less.

📕 Remove the additional parameters from your function, as their value will
always be \`undefined\` or whatever default you've assigned.",
      "template": "📕 If you look at the tests, the function \`decodedValue\` only receives one
parameter. Nothing more and nothing less.

📕 Remove the additional parameters from your function, as their value will
always be \`undefined\` or whatever default you've assigned.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/141's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/142's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.general.no_parameter",
      "message": "Your function \`decodedValue\` does not have a parameter.
The tests won't pass without it.",
      "template": "Your function \`%{function.name}\` does not have a parameter.
The tests won't pass without it.",
      "variables": Object {
        "function.name": "decodedValue",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/143's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`.forEach(...)\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": ".forEach(...)",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/144's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/146's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/147's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.signature_not_optimal",
      "message": "📕 If you look at the tests, the function \`decodedValue\` only receives one
parameter. Nothing more and nothing less.

📕 Remove the additional parameters from your function, as their value will
always be \`undefined\` or whatever default you've assigned.",
      "template": "📕 If you look at the tests, the function \`decodedValue\` only receives one
parameter. Nothing more and nothing less.

📕 Remove the additional parameters from your function, as their value will
always be \`undefined\` or whatever default you've assigned.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/150's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.general.no_method",
      "message": "No method called \`decodedValue\`. The tests won't pass without it.",
      "template": "No method called \`%{method.name}\`. The tests won't pass without it.",
      "variables": Object {
        "method.name": "decodedValue",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/152's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/153's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/154's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_math_instead_of_type_juggling",
      "message": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "template": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/155's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_math_instead_of_type_juggling",
      "message": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "template": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/156's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`.forEach(...)\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": ".forEach(...)",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/159's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/161's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/164's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.general.no_method",
      "message": "No method called \`decodedValue\`. The tests won't pass without it.",
      "template": "No method called \`%{method.name}\`. The tests won't pass without it.",
      "variables": Object {
        "method.name": "decodedValue",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/165's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`for(...) { }\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": "for(...) { }",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/166's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/168's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`.forEach(...)\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": ".forEach(...)",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/172's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/174's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/175's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`.forEach(...)\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": ".forEach(...)",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/177's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_math_instead_of_type_juggling",
      "message": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "template": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/178's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_math_instead_of_type_juggling",
      "message": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "template": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/181's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/183's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/185's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/186's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/187's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/190's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/191's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/192's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/193's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_optimise_helper",
      "message": "⚡ The helper method \`colorCode\` is not optimal. The helper can
probably be the same as the solution to \`resistor-color\`. Mentor the student
to retrieve their solution and/or optimise their helper.",
      "template": "⚡ The helper method \`%{method.name}\` is not optimal. The helper can
probably be the same as the solution to \`resistor-color\`. Mentor the student
to retrieve their solution and/or optimise their helper.",
      "variables": Object {
        "method.name": "colorCode",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/194's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/195's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`for(...) { }\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": "for(...) { }",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/197's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`for(...) { }\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": "for(...) { }",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/199's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/200's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`for(...) { }\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": "for(...) { }",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/201's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_math_instead_of_type_juggling",
      "message": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "template": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/202's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/203's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/204's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/205's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`for(...) { }\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": "for(...) { }",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/206's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/207's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`for(...) { }\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": "for(...) { }",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/208's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/211's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/215's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_math_instead_of_type_juggling",
      "message": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "template": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/218's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/220's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`for(...) { }\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": "for(...) { }",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/221's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/222's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/223's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/224's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/225's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/226's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.signature_not_optimal",
      "message": "📕 If you look at the tests, the function \`decodedValue\` only receives one
parameter. Nothing more and nothing less.

📕 Remove the additional parameters from your function, as their value will
always be \`undefined\` or whatever default you've assigned.",
      "template": "📕 If you look at the tests, the function \`decodedValue\` only receives one
parameter. Nothing more and nothing less.

📕 Remove the additional parameters from your function, as their value will
always be \`undefined\` or whatever default you've assigned.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/227's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/228's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/230's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/231's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.general.no_method",
      "message": "No method called \`decodedValue\`. The tests won't pass without it.",
      "template": "No method called \`%{method.name}\`. The tests won't pass without it.",
      "variables": Object {
        "method.name": "decodedValue",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/235's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/236's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/237's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`.forEach(...)\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": ".forEach(...)",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/238's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`.forEach(...)\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": ".forEach(...)",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/241's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/245's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`.forEach(...)\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": ".forEach(...)",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/246's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_math_instead_of_type_juggling",
      "message": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "template": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/247's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/248's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_math_instead_of_type_juggling",
      "message": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "template": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/251's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/256's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_math_instead_of_type_juggling",
      "message": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "template": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/257's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_math_instead_of_type_juggling",
      "message": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "template": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/258's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_math_instead_of_type_juggling",
      "message": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "template": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/259's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.signature_not_optimal",
      "message": "📕 If you look at the tests, the function \`decodedValue\` only receives one
parameter. Nothing more and nothing less.

📕 Remove the additional parameters from your function, as their value will
always be \`undefined\` or whatever default you've assigned.",
      "template": "📕 If you look at the tests, the function \`decodedValue\` only receives one
parameter. Nothing more and nothing less.

📕 Remove the additional parameters from your function, as their value will
always be \`undefined\` or whatever default you've assigned.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/260's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/261's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/263's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`.forEach(...)\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": ".forEach(...)",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/264's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_math_instead_of_type_juggling",
      "message": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "template": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/265's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.general.no_method",
      "message": "No method called \`decodedValue\`. The tests won't pass without it.",
      "template": "No method called \`%{method.name}\`. The tests won't pass without it.",
      "variables": Object {
        "method.name": "decodedValue",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/266's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_math_instead_of_type_juggling",
      "message": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "template": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/267's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`for(...) { }\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": "for(...) { }",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/270's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/271's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/272's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/273's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`.forEach(...)\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": ".forEach(...)",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/274's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_math_instead_of_type_juggling",
      "message": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "template": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/275's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`.forEach(...)\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": ".forEach(...)",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/276's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/278's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/280's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/281's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/282's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`.forEach(...)\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": ".forEach(...)",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/284's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/285's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/286's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_math_instead_of_type_juggling",
      "message": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "template": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/287's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`for(...) { }\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": "for(...) { }",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/288's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`for(...) { }\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": "for(...) { }",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/289's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/290's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`for(...) { }\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": "for(...) { }",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/293's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.general.no_method",
      "message": "No method called \`decodedValue\`. The tests won't pass without it.",
      "template": "No method called \`%{method.name}\`. The tests won't pass without it.",
      "variables": Object {
        "method.name": "decodedValue",
      },
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/296's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/297's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`.forEach(...)\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": ".forEach(...)",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/298's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/299's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/300's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`for(...) { }\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": "for(...) { }",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/302's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.must_use_a_helper",
      "message": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "template": "📕 Mentor the student to add helper function and DRY-up this solution. The
solution to \`resistor-color\` can be used as helper method here. When using an
\`Array\` as colors source, in a years time, will the student recall why it's
the _index_ in that array? When using an \`Object\`, what does the value mean?
Re-using \`colorCode\` explains this in both cases.

💬 Using a helper method is good practice, because it replaces a cryptic \\"member
call\\" with a named call, that can be documented individually.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/303's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_array_comprehensions",
      "message": "💬 Replace \`.forEach(...)\` with a comprehension such as \`map\`.",
      "template": "💬 Replace \`%{current}\` with a comprehension such as \`map\`.",
      "variables": Object {
        "current": ".forEach(...)",
      },
    },
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.use_math_instead_of_type_juggling",
      "message": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "template": "📕 The final value is currently \\"constructed\\" by placing digits in a string and
then intepreting that string as a number. This form of type-juggling is not
needed. Instead, a solution using one multiplication and one addition, has
lower cognitive complexity.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;

exports[`When running analysis on resistor-color-duo fixtures and expecting it to disapprove matches resistor-color-duo/304's output: output 1`] = `
IsolatedAnalyzerOutput {
  "comments": Array [
    CommentImpl {
      "externalTemplate": "javascript.resistor-color-duo.prefer_number_over_parse",
      "message": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "template": "💬 Use \`Number(...)\` when the input is expected to be a number. It's more
strict than the \`parseXXX\` family and applies in this exercise.",
      "variables": Object {},
    },
  ],
  "status": "disapprove",
}
`;
